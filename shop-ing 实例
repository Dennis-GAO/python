thinking

1  首先创建一个产品列表
2  引导用户选择商品号 
3 存钱的变量是否够买这个商品的

定义一个产品列表 （打印的时候为了好看 通过for i in (产品列表）/为了方便查找 同时打印列表的序列号

for i in (产品列表）：
	print（产品列表.index(),i）

for i in enumerate(产品列表,1）：   自动加上数字列  ，1  从1开始  默认从0
	print（i）

for i，v in enumerate(产品列表,1）：   通过两个变量去提出来 可以针对不同变量修改  方便以后
	print（i，v）   print（i，》》》》》v）


定义一个用户钱包的变量 （需要判断是否是数字 /同时把字符串转换成整型）

定义一个循环  让顾客循环选择   在循环中定义一个函数接收用户的选择输入 同时提醒用户是否退出
	循环内判断顾客的选择是否是数字（产品列号）数字 非法字符  还是退出
		用户输入的是数字  转换为整型 判断是否在购买列表范围内
		为了方便以后列表的增加  判断用户的输入大于0 小于列表的长度len（购物列表）

			定一个变量=用户输入选择的商品

			判断 选的商品价格是否小于 顾客的钱包  同时放到购物车（定义一个购物车空列表 添加进去 ）




product_list=[
    ('Mac',9000),
    ('kindle',800),
    ('tesla',900000),
    ('python book',105),
    ('bike',2000),

]
saving=input('please input your money:')
shopping_car=[]
if saving.isdigit():
    saving=int(saving)
    while True:
        #打印商品内容
        for i,v in enumerate(product_list,1):
            print(i,'>>>>',v)

         #引导用户选择商品
        choice=input('选择购买商品编号[退出：q]：')

        #验证输入是否合法
        if choice.isdigit():
            choice=int(choice)
            if choice>0 and choice<=len(product_list):
                #将用户选择商品通过choice取出来
                p_item=product_list[choice-1]

                #如果钱够，用本金saving减去该商品价格，并将该商品加入购物车
                if p_item[1]<saving:
                    saving-=p_item[1]

                    shopping_car.append(p_item)

                else:
                    print('余额不足，还剩%s'%saving)
                print(p_item)
            else:
                print('编码不存在')
        elif choice=='q':
            print('------------您已经购买如下商品----------------')
            #循环遍历购物车里的商品，购物车存放的是已买商品
            for i in shopping_car:
                print(i)
            print('您还剩%s元钱'%saving)
            break
        else:
            print('invalid input')
